// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: tracker_to_tracker.proto

package tracker_tracker_protocol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TrackerComunicationClient is the client API for TrackerComunication service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrackerComunicationClient interface {
	RePublish(ctx context.Context, in *RePublishQuery, opts ...grpc.CallOption) (*RePublishResponse, error)
	KnowMe(ctx context.Context, in *KnowMeRequest, opts ...grpc.CallOption) (*KnowMeResponse, error)
}

type trackerComunicationClient struct {
	cc grpc.ClientConnInterface
}

func NewTrackerComunicationClient(cc grpc.ClientConnInterface) TrackerComunicationClient {
	return &trackerComunicationClient{cc}
}

func (c *trackerComunicationClient) RePublish(ctx context.Context, in *RePublishQuery, opts ...grpc.CallOption) (*RePublishResponse, error) {
	out := new(RePublishResponse)
	err := c.cc.Invoke(ctx, "/tracker.TrackerComunication/RePublish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackerComunicationClient) KnowMe(ctx context.Context, in *KnowMeRequest, opts ...grpc.CallOption) (*KnowMeResponse, error) {
	out := new(KnowMeResponse)
	err := c.cc.Invoke(ctx, "/tracker.TrackerComunication/KnowMe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrackerComunicationServer is the server API for TrackerComunication service.
// All implementations must embed UnimplementedTrackerComunicationServer
// for forward compatibility
type TrackerComunicationServer interface {
	RePublish(context.Context, *RePublishQuery) (*RePublishResponse, error)
	KnowMe(context.Context, *KnowMeRequest) (*KnowMeResponse, error)
	mustEmbedUnimplementedTrackerComunicationServer()
}

// UnimplementedTrackerComunicationServer must be embedded to have forward compatible implementations.
type UnimplementedTrackerComunicationServer struct {
}

func (UnimplementedTrackerComunicationServer) RePublish(context.Context, *RePublishQuery) (*RePublishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RePublish not implemented")
}
func (UnimplementedTrackerComunicationServer) KnowMe(context.Context, *KnowMeRequest) (*KnowMeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KnowMe not implemented")
}
func (UnimplementedTrackerComunicationServer) mustEmbedUnimplementedTrackerComunicationServer() {}

// UnsafeTrackerComunicationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrackerComunicationServer will
// result in compilation errors.
type UnsafeTrackerComunicationServer interface {
	mustEmbedUnimplementedTrackerComunicationServer()
}

func RegisterTrackerComunicationServer(s grpc.ServiceRegistrar, srv TrackerComunicationServer) {
	s.RegisterService(&TrackerComunication_ServiceDesc, srv)
}

func _TrackerComunication_RePublish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RePublishQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackerComunicationServer).RePublish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tracker.TrackerComunication/RePublish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackerComunicationServer).RePublish(ctx, req.(*RePublishQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackerComunication_KnowMe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KnowMeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackerComunicationServer).KnowMe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tracker.TrackerComunication/KnowMe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackerComunicationServer).KnowMe(ctx, req.(*KnowMeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TrackerComunication_ServiceDesc is the grpc.ServiceDesc for TrackerComunication service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TrackerComunication_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tracker.TrackerComunication",
	HandlerType: (*TrackerComunicationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RePublish",
			Handler:    _TrackerComunication_RePublish_Handler,
		},
		{
			MethodName: "KnowMe",
			Handler:    _TrackerComunication_KnowMe_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tracker_to_tracker.proto",
}
